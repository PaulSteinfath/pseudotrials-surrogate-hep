function EEG = permute_HEP_timings(EEG, event_pairs, permutations_markers)
    % PERMUTE_HEP_TIMINGS - Permutes event latencies between paired HEP and target markers.
    %
    % Description:
    %    This function calculates the latency differences between specific event
    %    pairs (e.g., R peak and target stimuli) and shuffles them. Two permutations
    %    are generated by appending permutations_markers to event types. This allows testing
    %    how covariation between events affects ECG-related potentials without
    %    altering the distribution of intervals.
    %
    % Inputs:
    %    EEG - EEG structure containing event information.
    %    event_pairs - Nx2 cell array specifying pairs of event types to permute.
    %    permutations_markers - Cell array of strings to append to event types for permutations.
    %
    % Outputs:
    %    EEG - Modified EEG structure with permuted event latencies.
    %

    if nargin < 2 || isempty(event_pairs)
        error('Please provide event pairs for processing.');
    end
    
    % Ensure event_pairs is a 2-column cell array
    if size(event_pairs, 2) ~= 2
        error('The event_pairs argument should be a Nx2 cell array.');
    end
    
    % Initialize a column for latency differences in the table
    events_tmp = EEG.event;
    
    % For each row in the table...
    for i = 1:length(events_tmp)
        current_type = events_tmp(i).type;
        paired_event = '';
    
        % Find corresponding pair type
        for j = 1:size(event_pairs, 1)
            if strcmp(current_type, event_pairs{j, 1})
                paired_event = event_pairs{j, 2};
                is_first = true;
                break;
            elseif strcmp(current_type, event_pairs{j, 2})
                paired_event = event_pairs{j, 1};
                is_first = false;
                break;
            end
        end
    
        if ~isempty(paired_event)
            % Find ALL matching pairs, not just the next one
            pair_indices = find(strcmp({events_tmp.type}, paired_event));
            if ~isempty(pair_indices)
                % Calculate latency difference with closest pair
                [~, closest_idx] = min(abs([events_tmp(pair_indices).latency] - events_tmp(i).latency));
                if is_first
                    events_tmp(i).latency_diff = events_tmp(pair_indices(closest_idx)).latency - events_tmp(i).latency;
                else
                    events_tmp(i).latency_diff = events_tmp(i).latency - events_tmp(pair_indices(closest_idx)).latency;
                end
            end
        end
    end
    
    % Perform a number of different permutations, with n_permutations = length(permutations_markers)
    for s = 1:length(permutations_markers)
        % Create a copy of the events to be permuted
        permuted_events = events_tmp;
    
        % For each event type, adjust the latencies of the copied events based on the permuted differences
        for k = 1:size(event_pairs, 1)
            orig_event = event_pairs{k, 1};
            paired_event = event_pairs{k, 2};
    
            % Subtract the latency differences from the paired latencies
            orig_latencies = [permuted_events(strcmp({permuted_events.type}, paired_event)).latency];
            diff_events = [permuted_events(strcmp({permuted_events.type}, orig_event)).latency_diff];
            perm_diff_events = diff_events(randperm(length(diff_events)));
    
            idx = find(strcmp({permuted_events.type}, orig_event));
            for i = 1:length(idx)
                permuted_events(idx(i)).latency = orig_latencies(i) - perm_diff_events(i);
                % Rename permuted event
                permuted_events(idx(i)).type = [permuted_events(idx(i)).type, permutations_markers{s}];
                
                % Also rename the paired event
                paired_idx = find(strcmp({permuted_events.type}, paired_event) & ...
                                  [permuted_events.latency] == orig_latencies(i));
                for p = 1:length(paired_idx)
                    permuted_events(paired_idx(p)).type = [permuted_events(paired_idx(p)).type, permutations_markers{s}];
                end
            end
        end
    
        % (4) Add better error handling for missing latency_diff fields
        permuted_events = rmfield(permuted_events, 'latency_diff');
        
        % Append the permuted events to the original events
        EEG.event = [EEG.event, permuted_events];
    end

end
