function summarize_stats_abs(stats_dir, img_save_path, real_stat_file, baseline_correction)
% SUMMARIZE_STATS_ABS Summarizes permutation analysis statistics.
%
% This function loads permutation stat files generated by run_perm_prepped_files,
% extracts the maximum absolute cluster sum(t) values for P300 and RT analyses,
% loads the original (real) stat files, and then plots histograms for each.
%
% Inputs:
%   stats_dir      - Directory containing permutation stat .mat files.
%                    Two patterns are assumed:
%                      *_stat_HEP_target.mat      (P300 sorted HEP)
%                      *_stat_HEP_target_RT.mat   (RT sorted HEP)
%   img_save_path  - Directory in which to save the summary figures.
%   real_stat_file - Full path to the real stat file for non-RT data (e.g., stat_HEP_target_heartbeat_correct_random.mat).
%   real_rt_stat_file - Full path to the real stat file for RT data.
%
% The function creates two figures: one summarizing P300 sorted HEP stat distributions and one for RT.
%
%
% Author: Paul Steinfath

% Adjust stats_dir based on baseline correction
if baseline_correction == 1
    base_folder = 'baseline';
else
    base_folder = 'no_baseline';
end
stats_dir = fullfile(stats_dir, base_folder, '/stats/');
real_stat_file = fullfile(real_stat_file, base_folder, 'stats.mat');

%% --- Process non-RT (original) stats from permutation files ---
filePattern = fullfile(stats_dir, '*_stat_HEP_target.mat');
files = dir(filePattern);
numFiles = length(files);

% Preallocate arrays for permutation cluster statistics (non RT)
abs_max_t = zeros(1, numFiles);

% Loop over subjects
for i = 1:numFiles
    % Load data
    S = load(fullfile(stats_dir, files(i).name));
    % Get the stats (if exists)
    if isfield(S, 'stat_HEP_target')
        stat = S.stat_HEP_target;
    else
        continue;
    end
    % Get negative cluster stat (if exists)
    if isfield(stat, 'negclusters') && ~isempty(stat.negclusters) && isfield(stat.negclusters(1), 'clusterstat')
        neg_t = stat.negclusters(1).clusterstat;
    else
        neg_t = 0; % Default to 0 if no negative cluster exists.
    end
    % Get positive cluster stat (if exists)
    if isfield(stat, 'posclusters') && ~isempty(stat.posclusters) && isfield(stat.posclusters(1), 'clusterstat')
        pos_t = stat.posclusters(1).clusterstat;
    else
        pos_t = 0; % Default to 0 if no positive cluster exists.
    end
    % Store the maximum absolute value of the cluster statistics.
    abs_max_t(i) = max(abs(neg_t), abs(pos_t));
end

%% Load real (original) non-RT stat file
Sreal = load(real_stat_file);
% Assume the real stat is stored in a field named stat_HEP_target_heartbeat_correct_random
if isfield(Sreal, 'stat_HEP_target')
    real_stat = Sreal.stat_HEP_target_correct_random;
    % Extract the real values
    real_neg = []; real_pos = [];
    if isfield(real_stat, 'negclusters') && ~isempty(real_stat.negclusters)
        real_neg = real_stat.negclusters(1).clusterstat;
    end
    if isfield(real_stat, 'posclusters') && ~isempty(real_stat.posclusters)
        real_pos = real_stat.posclusters(1).clusterstat;
    end
    real_abs = max(abs(real_neg), abs(real_pos));
else
    error('Real non-RT stat file does not contain expected field.');
end

%% Plot histogram for non-RT data
figure;
histogram(abs_max_t, 'Normalization', 'count', 'NumBins', 15, 'FaceColor', [0.7 0.7 0.7]);
xlabel('Max |cluster sum(t)|');
ylabel('Count');
title('Surrogate Absolute t-value Distribution');
hold on;
% Add a vertical line for the 95th percentile of surrogate data.
perc95 = prctile(abs_max_t, 95);
xline(perc95, '--b', 'LineWidth', 1, 'DisplayName', '95th Percentile');
% Add a vertical line for the real data absolute t-value.
xline(real_abs, '-r', 'LineWidth', 1.5, 'DisplayName', 'Real Data');
legend show;
hold off;
saveas(gcf, fullfile(img_save_path, 'abs_t_val_hist_P300.svg'));
close(gcf);

%% --- Process RT stats from permutation files ---
filePattern_RT = fullfile(stats_dir, '*_stat_HEP_target_RT.mat');
files_RT = dir(filePattern_RT);
numFiles_RT = length(files_RT);

% Preallocate arrays for permutation cluster statistics
abs_max_t_RT = zeros(1, numFiles_RT);

% Loop over subjects
for i = 1:numFiles_RT
    % Load data
    S = load(fullfile(stats_dir, files_RT(i).name));
    % Get the stats (if exists)
    if isfield(S, 'stat_HEP_target_RT')
        stat = S.stat_HEP_target_RT;
    else
        continue;
    end
    % Get negative cluster stat (if exists)
    if isfield(stat, 'negclusters') && ~isempty(stat.negclusters) && isfield(stat.negclusters(1), 'clusterstat')
        neg_t = stat.negclusters(1).clusterstat;
    else
        neg_t = 0; % Default to 0 if no negative cluster exists
    end
    % Get positive cluster stat (if exists)
    if isfield(stat, 'posclusters') && ~isempty(stat.posclusters) && isfield(stat.posclusters(1), 'clusterstat')
        pos_t = stat.posclusters(1).clusterstat;
    else
        pos_t = 0; % Default to 0 if no positive cluster exists
    end
    % Store the maximum absolute value of the cluster statistics.
    abs_max_t_RT(i) = max(abs(neg_t), abs(pos_t));
end

%% Load real RT stat file
SrealRT = load(real_stat_file);
if isfield(SrealRT, 'stat_HEP_target_RT')
    real_stat_RT = SrealRT.stat_HEP_target_RT;
    real_neg_RT = []; real_pos_RT = [];
    % Extract real negative and positive cluster statistics for RT.
    if isfield(real_stat_RT, 'negclusters') && ~isempty(real_stat_RT.negclusters)
        real_neg_RT = real_stat_RT.negclusters(1).clusterstat;
    end
    if isfield(real_stat_RT, 'posclusters') && ~isempty(real_stat_RT.posclusters)
        real_pos_RT = real_stat_RT.posclusters(1).clusterstat;
    end
    % Calculate the maximum absolute value of the real RT statistics.
    real_abs_RT = max(abs(real_neg_RT), abs(real_pos_RT));
else
    error('Real RT stat file does not contain expected field.');
end

%% Plot histogram for RT data
figure;
histogram(abs_max_t_RT, 'Normalization', 'count', 'NumBins', 15, 'FaceColor', [0.7 0.7 0.7]);
xlabel('Max |cluster sum(t)|');
ylabel('Count');
title('Surrogate Absolute t-value Distribution (RT)');
hold on;
% Add a vertical line for the 95th percentile of surrogate RT data.
perc95_RT = prctile(abs_max_t_RT, 95);
xline(perc95_RT, '--b', 'LineWidth', 1, 'DisplayName', '95th Percentile');
% Add a vertical line for the real RT data absolute t-value.
xline(real_abs_RT, '-r', 'LineWidth', 1.5, 'DisplayName', 'Real Data');
legend show;
hold off;
saveas(gcf, fullfile(img_save_path, 'abs_t_val_hist_RT.svg'));
close(gcf);
